name: Add a new model

# Trigger the workflow on pull request
on:
  issues:
    types: [assigned]

jobs:
  create_new_branch:
    if: contains(github.event.issue.labels.*.name, 'failed') != true && ${{startsWith(github.event.issue.title, 'New Model:')}}

    runs-on: ubuntu-latest

    outputs:
      BRANCHNAME: ${{ steps.Create_Issue_Branch.outputs.branchName }}
      PYTHONS: ${{ env.pythons2 }}
      IMAGENAME: ${{ steps.set_image_name.outputs.image_name }}
      MODELPATH: ${{ steps.get_path.outputs.path }}
      MODELNAME: ${{ steps.set_image_name.outputs.model_name }}

    steps:
        # This will automatically create a new branch from this issue, using custom config at /.github/issue-branch.yml
      - name: Create Issue Branch
        id: Create_Issue_Branch
        uses: robvanderleek/create-issue-branch@main
        env:
          GITHUB_TOKEN:
            ${{ secrets.GITHUB_TOKEN }}
    
      # Set up Python
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.11

      # Checkout the repository to the GitHub Actions runner
      # This is when the action fails and the user wants to update the issue scripts
      # This will ref the issue branch and allow for the rest of the script to update
      # the branch.
      - uses: actions/checkout@v3
        if: steps.Create_Issue_Branch.outputs.branchName == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName
      - uses: actions/checkout@v3
        if: steps.Create_Issue_Branch.outputs.branchName != ''
        with:
            ref: ${{ steps.Create_Issue_Branch.outputs.branchName }}

      - uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/addModel.yml # optional but recommended
      
      - name: Get Python Scripts
        id: python_scripts
        run: |
          echo "pythons<<EOF" >> $GITHUB_ENV
          echo "${{ steps.issue-parser.outputs.issueparser_python-scripts }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Get the Path
        id: get_path
        run: echo "path=${{ steps.issue-parser.outputs.issueparser_path }}" >> $GITHUB_OUTPUT

      # Get docker url
      - name: Get Docker URL
        id: get_docker_url
        run: echo "docker_url=${{ steps.issue-parser.outputs.issueparser_docker }}" >> $GITHUB_OUTPUT

      - name: Install svn
        run: sudo apt-get install subversion
    
      - name: Generate SVN URLs
        id: generate_urls
        run: |
          echo "pythons2<<EOF" >> $GITHUB_ENV
          python ./.github/workflows/getPythonScripts.py >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
            pythons: ${{ env.pythons }}
        
      - name: Clone python scripts
        run: |
          svn_urls="${{ env.pythons2 }}"
          for svn_url in $svn_urls; do
            svn export --force $svn_url ./${{ steps.get_path.outputs.path }}
          done

      - name: Clone docker folder
        run: |
          url="${{ steps.get_docker_url.outputs.docker_url }}"
          echo $url
          svn_url=$(echo "$url" | sed -E 's|/tree/[^/]+|/trunk|; s|/blob/[^/]+|/trunk|')

          svn export --force $svn_url ./${{ steps.get_path.outputs.path }}/dockercontext

      # Commit the new created files and folders to the branch needs.create_new_branch.outputs.BRANCHNAME
      - name: Commit the new files
        run: |
          echo ${{ steps.Create_Issue_Branch.outputs.branchName }}
          echo $(git show-ref)
          git config --global user.name "trained_models"
          git config --global user.email "trained_models"
          git add ./${{ steps.get_path.outputs.path }}
          git commit -m "Added model folder and files"
          git push -u origin ${{ steps.Create_Issue_Branch.outputs.branchName }}

      # Get image name
      - name: Set docker image name
        id: set_image_name
        run: |
          full_path="${{ steps.get_path.outputs.path }}"
          model_name=$(echo "$full_path" | awk -F '/' '{print $(NF-1)}')
          echo "image_name=$model_name" >> $GITHUB_OUTPUT
          echo "model_name=$model_name" >> $GITHUB_OUTPUT

      # Build the Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ steps.set_image_name.outputs.image_name }} ./${{ steps.get_path.outputs.path }}/dockercontext
          docker save --output ./${{ steps.get_path.outputs.path }}/dockercontext/${{ steps.set_image_name.outputs.model_name }}.tar ${{ steps.set_image_name.outputs.model_name }}

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.set_image_name.outputs.model_name }}
          path: ./${{ steps.get_path.outputs.path }}/dockercontext/${{ steps.set_image_name.outputs.model_name }}.tar

  test_env_vars:
    runs-on: ubuntu-latest
    needs: create_new_branch
    
    steps:
    
    - uses: actions/checkout@v3
      with:
        ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}


    # Download docker artifact
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: ${{ needs.create_new_branch.outputs.MODELNAME }}
        path: ./${{ needs.create_new_branch.outputs.MODELPATH }}/dockercontext

    # Load the Docker image
    - name: Load Docker image
      run: |
        docker load -i "./${{ needs.create_new_branch.outputs.MODELPATH }}/dockercontext/${{ needs.create_new_branch.outputs.MODELNAME }}.tar"

  failed:
    runs-on: ubuntu-latest

    needs: [create_new_branch, test_env_vars]

    if: ${{ always() && contains(needs.*.result, 'failure') }}

    steps:
      - name: Set labels
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'set-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          labels: 'failed'

      - name: Create comment
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
              Hello @${{ github.event.issue.user.login }}. The folders/scripts you provided did not pass our tests. Please check out the Action, and modify this issue accordingly with other/same urls. 

              When ready, just change the label of this issue to "Ready for testing".
  
          emoji: '+1,eyes'