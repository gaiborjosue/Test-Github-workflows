name: Update an existing model

# Trigger the workflow on pull request
on:
  issues:
    types: [ assigned, labeled ]

jobs:

  create_new_branch:
    # The workflow will only activate if the title starts with "New Model:" and does not have a label 'failed'.
    # If the label is 'failed' the user must update the bugs and update the label to 'ready-for-testing' 游릭
    if: ${{startsWith(github.event.issue.title, 'Update Model:') && contains(github.event.issue.labels.*.name, 'failed') != true}}

    runs-on: ubuntu-latest

    outputs:
      BRANCHNAME: ${{ steps.Create_Issue_Branch.outputs.BRANCHNAME }}
      # All the issue form data
      MODELPATH: ${{ steps.Create_Issue_Branch.outputs.MODELPATH }}
      WEIGHTS: ${{ steps.Create_Issue_Branch.outputs.WEIGHTS }}
      DOCKER: ${{ steps.Create_Issue_Branch.outputs.DOCKER }}
      PYTHON: ${{ steps.Create_Issue_Branch.outputs.PYTHONS }}
      MODELINFO: ${{ steps.Create_Issue_Branch.outputs.MODELINFO }}
      SAMPLEDATA: ${{ steps.Create_Issue_Branch.outputs.SAMPLEDATA }}
      PYTHONS: ${{ steps.Create_Issue_Branch.outputs.PYTHONS }}
      UPDATES: ${{ steps.Create_Issue_Branch.outputs.UPDATES }}

    steps:
    # This will automatically create a new branch from this issue, using custom config at /.github/issue-branch.yml 游릭
    # Create a new repo, and parse issue information with composite action
    - name: Setup the Branch
      uses: gaiborjosue/Branch_Creation_Nobrainer@main
      id: Create_Issue_Branch
      with:
          issueNumber: ${{ github.event.issue.number }}
          token: ${{ secrets.GITHUB_TOKEN }}

  push-model:
    needs: create_new_branch

    runs-on: ubuntu-latest

    steps:
      # Checkout the repository to the GitHub Actions runner to the new branch created for the issue 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME == ''
        with:
          ref: issue-${{ github.event.issue.number }}

      # If branchName is empty use issue number, else, use the branchName 游릭
      - uses: actions/checkout@v3
        if: needs.create_new_branch.outputs.BRANCHNAME != ''
        with:
            ref: ${{ steps.create_new_branch.outputs.BRANCHNAME }}

      # Install svn to clone subdir of github repos 游릭
      - name: Install svn
        run: sudo apt-get install subversion
      
      # Get svn url for exporting docker 游릭
      - name: Clone docker folder
        if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'DockerInformation') }} 
        run: |
          url="${{ needs.create_new_branch.outputs.DOCKER }}"
          
          svn_url=$(echo "$url" | sed -E 's|/tree/[^/]+|/trunk|; s|/blob/[^/]+|/trunk|')

          svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}/docker
      
      - name: Get Python Scripts
        # Only if Models python is inside the list of updates in Create_Issue_Branch
        if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelPythonScripts') }}
        id: python_scripts
        run: |
          echo "pythons<<EOF" >> $GITHUB_ENV
          echo "${{ needs.create_new_branch.outputs.PYTHONS }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Get svn url for exporting 游릭
      - name: Generate Python SVN URLs
        if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelPythonScripts') }} 
        id: generate_urls
        run: |
          echo "pythons2<<EOF" >> $GITHUB_ENV
          python ./.github/workflows/getPythonScripts.py >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
            pythons: ${{ needs.create_new_branch.outputs.PYTHONS }}
      
      # Export the urls/clone the scripts 游릭
      - name: Clone python scripts
        if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelPythonScripts') }}
        run: |
          svn_urls="${{ env.pythons2 }}"
          for svn_url in $svn_urls; do
            svn export --force $svn_url ./${{ needs.create_new_branch.outputs.MODELPATH }}
          done
      
      - name: Get Model Info
        if: ${{ contains(steps.Create_Issue_Branch.outputs.UPDATES, 'ModelCardAndSpec') }}
        id: get_model_info
        run: |
          echo "model_info<<EOF" >> $GITHUB_ENV
          echo "${{ needs.create_new_branch.outputs.MODELINFO }}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
    
      # Commit the new created files and folders to the branch needs.create_new_branch.outputs.BRANCHNAME 游릭
      - name: Commit and Push the new files
        if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelCardAndSpec') || contains(needs.create_new_branch.outputs.UPDATES, 'ModelPythonScripts') || contains(needs.create_new_branch.outputs.UPDATES, 'DockerInformation')}}
        run: |
          git config --global user.name "trained_models"
          git config --global user.email "trained_models"
          git add .
          git commit -m "Added model files"
          git push origin ${{ needs.create_new_branch.outputs.BRANCHNAME }}
  
  build:
    needs: [create_new_branch, push-model]
    runs-on: ubuntu-latest

    outputs:
      IMAGENAME: ${{ steps.set_image_name.outputs.image_name }}
      MODELNAME: ${{ steps.set_image_name.outputs.model_name }}

    steps:
    # Checkout the repository to the GitHub Actions runner 游릭
    - uses: actions/checkout@v3
      if: needs.create_new_branch.outputs.BRANCHNAME == ''
      with:
        ref: issue-${{ github.event.issue.number }}

    # If branchName is empty use issue number, else, use the branchName 游릭
    - uses: actions/checkout@v3
      if: needs.create_new_branch.outputs.BRANCHNAME != ''
      with:
        ref: ${{ needs.create_new_branch.outputs.BRANCHNAME }}

    # Set up Python
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    # Install yaml
    - name: Install yaml and oyaml
      if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelCardAndSpec') }}
      run: |
          pip install pyyaml
          pip install oyaml

    # Install linkml
    - name: Install LinkML
      if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelCardAndSpec') }}
      run: pip install linkml
        
    # Create model card and spec.yaml file
    - name: Validate model card and spec files
      if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelCardAndSpec') }}
      run: |
          echo "## Model Card and Spec Validation :white_check_mark:" >> $GITHUB_STEP_SUMMARY
          echo "Model Card and spec yaml files are being validated here with LinkML Schema" >> $GITHUB_STEP_SUMMARY
          python ./.github/workflows/create_model_card_and_spec.py
      env:
          model_path: ${{ needs.create_new_branch.outputs.MODELPATH }}
      
    # Update the model's spec.yaml file
    - name: Update yaml file
      if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'ModelCardAndSpec') }}  
      run: python ./.github/workflows/update_yaml_info.py
    
    # Get image name 游릭
    - name: Set docker image name
      if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'DockerInformation') }} 
      id: set_image_name
      run: |
        full_path="${{ needs.create_new_branch.outputs.MODELPATH }}"
        model_name=$(echo "$full_path" | awk -F '/' '{print $(NF-1)}')
        echo "image_name=neuronets/$model_name" >> $GITHUB_OUTPUT
        echo "model_name=$model_name" >> $GITHUB_OUTPUT

    # Commit the changes (spec.yaml file and model card) 游릭
    - name: Commit changes
      if: ${{ contains(needs.create_new_branch.outputs.UPDATES, 'DockerInformation') || contains(needs.create_new_branch.outputs.UPDATES, 'ModelCardAndSpec')}} 
      run: |
        git config --global user.name "trained_models"
        git config --global user.email "trained_models"
        git add ${{ needs.create_new_branch.outputs.MODELPATH }}/spec.yaml
        git commit -m "Updated spec.yaml"
        git push origin ${{ needs.create_new_branch.outputs.BRANCHNAME }}

  failed:
    runs-on: ubuntu-latest

    needs: [create_new_branch, push-model, build]

    # If any of the jobs in 'needs' fails, this job will activate and run 游릭
    if: ${{ always() && contains(needs.*.result, 'failure') }}

    steps:
      # If the past jobs have failed, it means that the model did not pass our standards. Therefore,
      # it will label the issue 'failed' and will not rerun the action until the user updates/fixes the bugs. 游릭
      - name: Set labels
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'set-labels'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          labels: 'failed'
      
      # Let the user know that the action has failed, and they need to restart it after fixing their issue. 游릭
      - name: Create comment
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.issue.number }}
          body: |
              Hello @${{ github.event.issue.user.login }}. The folders/scripts you provided did not pass our tests. Please check out the Action, and modify this issue accordingly with other/same urls. 

              When ready, just change the label of this issue to "Ready for testing".
  
          emoji: '+1,eyes'